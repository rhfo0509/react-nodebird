{"version":3,"file":"static/chunks/991-318b37b0078021f8.js","mappings":"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","sources":["webpack://_N_E/./components/UserProfile.js","webpack://_N_E/./components/LoginForm.js","webpack://_N_E/./components/AppLayout.js","webpack://_N_E/./components/ImagesZoom/styles.js","webpack://_N_E/./components/ImagesZoom/index.js","webpack://_N_E/./components/PostImages.js","webpack://_N_E/./components/CommentForm.js","webpack://_N_E/./components/PostCardContent.js","webpack://_N_E/./components/FollowButton.js","webpack://_N_E/./components/PostCard.js","webpack://_N_E/./hooks/useInput.js"],"sourcesContent":["import React, { useCallback } from \"react\";\r\nimport Link from \"next/link\";\r\nimport { Avatar, Button, Card } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logoutRequestAction } from \"../reducers/user\";\r\n\r\nconst UserProfile = () => {\r\n  const dispatch = useDispatch();\r\n  const { me, logOutLoading } = useSelector((state) => state.user);\r\n\r\n  const onLogout = useCallback(() => {\r\n    dispatch(logoutRequestAction({ type: \"LOG_OUT\" }));\r\n  }, []);\r\n  return (\r\n    <Card\r\n      actions={[\r\n        <div key=\"twit\">\r\n          <Link href={`/user/${me.id}`}>\r\n            <a>\r\n              짹짹\r\n              <br />\r\n              {me.Posts.length}\r\n            </a>\r\n          </Link>\r\n        </div>,\r\n        <div key=\"followings\">\r\n          <Link href=\"/profile\">\r\n            <a>\r\n              팔로잉\r\n              <br />\r\n              {me.Followings.length}\r\n            </a>\r\n          </Link>\r\n        </div>,\r\n        <div key=\"followers\">\r\n          <Link href=\"/profile\">\r\n            <a>\r\n              팔로워\r\n              <br />\r\n              {me.Followers.length}\r\n            </a>\r\n          </Link>\r\n        </div>,\r\n      ]}\r\n    >\r\n      <Card.Meta\r\n        avatar={<Avatar>{me.nickname[0]}</Avatar>}\r\n        title={me.nickname}\r\n      />\r\n      <Button onClick={onLogout} loading={logOutLoading}>\r\n        로그아웃\r\n      </Button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default UserProfile;\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { Button, Form, Input } from \"antd\";\r\nimport Link from \"next/link\";\r\nimport styled from \"styled-components\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport useInput from \"../hooks/useInput\";\r\n\r\nimport { loginRequestAction } from \"../reducers/user\";\r\n\r\nconst FormWrapper = styled(Form)`\r\n  padding: 10px;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst LoginForm = () => {\r\n  const [email, onChangeEmail] = useInput(\"\");\r\n  const [password, onChangePassword] = useInput(\"\");\r\n  const dispatch = useDispatch();\r\n  const { logInLoading, logInError } = useSelector((state) => state.user);\r\n\r\n  useEffect(() => {\r\n    if (logInError) {\r\n      alert(logInError);\r\n    }\r\n  }, [logInError]);\r\n\r\n  const onSubmitForm = useCallback(() => {\r\n    console.log(email, password);\r\n    dispatch(loginRequestAction({ email, password }));\r\n  }, [email, password]);\r\n\r\n  return (\r\n    <FormWrapper onFinish={onSubmitForm}>\r\n      <div>\r\n        <label htmlFor=\"user-email\">이메일</label>\r\n        <br />\r\n        <Input\r\n          name=\"user-email\"\r\n          value={email}\r\n          type=\"email\"\r\n          onChange={onChangeEmail}\r\n          required\r\n        />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"user-password\">패스워드</label>\r\n        <br />\r\n        <Input\r\n          name=\"user-password\"\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={onChangePassword}\r\n          required\r\n        />\r\n      </div>\r\n      <ButtonWrapper>\r\n        <Button type=\"primary\" htmlType=\"submit\" loading={logInLoading}>\r\n          로그인\r\n        </Button>\r\n        <Link href=\"/signup\">\r\n          <a>회원가입</a>\r\n        </Link>\r\n      </ButtonWrapper>\r\n    </FormWrapper>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Link from \"next/link\";\r\nimport Router from \"next/router\";\r\nimport { Input, Menu, Row, Col } from \"antd\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useInput from \"../hooks/useInput\";\r\n\r\nimport UserProfile from \"./UserProfile\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nconst SearchInput = styled(Input.Search)`\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst AppLayout = ({ children }) => {\r\n  const [searchInput, onChangeSearchInput] = useInput(\"\");\r\n  const onSearch = useCallback(() => {\r\n    Router.push(`/hashtag/${searchInput}`);\r\n  }, [searchInput]);\r\n  const me = useSelector((state) => state.user.me);\r\n\r\n  return (\r\n    <div>\r\n      <Menu mode=\"horizontal\">\r\n        <Menu.Item>\r\n          <Link href=\"/\">\r\n            <a>노드버드</a>\r\n          </Link>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <Link href=\"/profile\">\r\n            <a>프로필</a>\r\n          </Link>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <SearchInput\r\n            enterButton\r\n            value={searchInput}\r\n            onChange={onChangeSearchInput}\r\n            onSearch={onSearch}\r\n          />\r\n        </Menu.Item>\r\n      </Menu>\r\n      <Row>\r\n        <Col xs={24} md={6}>\r\n          {me ? <UserProfile /> : <LoginForm />}\r\n        </Col>\r\n        <Col xs={24} md={12}>\r\n          {children}\r\n        </Col>\r\n        <Col xs={24} md={6}>\r\n          <a\r\n            href=\"https://www.github.com/rhfo0509\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer noopener\"\r\n          >\r\n            Github\r\n          </a>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nAppLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default AppLayout;\r\n","import styled, { createGlobalStyle } from \"styled-components\";\r\nimport { CloseOutlined } from \"@ant-design/icons\";\r\n\r\nexport const Overlay = styled.div`\r\n  position: fixed;\r\n  z-index: 5000;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 44px;\r\n  background: white;\r\n  position: relative;\r\n  padding: 0;\r\n  text-align: center;\r\n\r\n  & h1 {\r\n    margin: 0;\r\n    font-size: 17px;\r\n    color: #333;\r\n    line-height: 44px;\r\n  }\r\n`;\r\n\r\nexport const CloseBtn = styled(CloseOutlined)`\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  padding: 15px;\r\n  line-height: 14px;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const SlickWrapper = styled.div`\r\n  height: calc(100% - 44px);\r\n  background: #090909;\r\n`;\r\n\r\nexport const ImgWrapper = styled.div`\r\n  padding: 32px;\r\n  text-align: center;\r\n\r\n  & img {\r\n    margin: 0 auto;\r\n    max-height: 750px;\r\n  }\r\n`;\r\n\r\nexport const Indicator = styled.div`\r\n  text-align: center;\r\n\r\n  & > div {\r\n    width: 75px;\r\n    height: 30px;\r\n    line-height: 30px;\r\n    border-radius: 15px;\r\n    background: #313131;\r\n    display: inline-block;\r\n    text-align: center;\r\n    color: white;\r\n    font-size: 15px;\r\n  }\r\n`;\r\n\r\nexport const Global = createGlobalStyle`\r\n  .slick-slide {\r\n    display: inline-block;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Slick from \"react-slick\";\r\n\r\nimport {\r\n  Overlay,\r\n  Global,\r\n  Header,\r\n  CloseBtn,\r\n  SlickWrapper,\r\n  ImgWrapper,\r\n  Indicator,\r\n} from \"./styles\";\r\n\r\nconst ImagesZoom = ({ images, onClose }) => {\r\n  const [currentSlide, setCurrentSlide] = useState(0);\r\n  return (\r\n    <Overlay>\r\n      <Global />\r\n      <Header>\r\n        <h1>상세 이미지</h1>\r\n        <CloseBtn onClick={onClose}>X</CloseBtn>\r\n      </Header>\r\n      <SlickWrapper>\r\n        <Slick\r\n          initialSlide={0}\r\n          afterChange={(slide) => setCurrentSlide(slide)}\r\n          infinite\r\n          arrows={false}\r\n          slidesToShow={1}\r\n          slidesToScroll={1}\r\n        >\r\n          {images.map((v) => (\r\n            <ImgWrapper key={v.src}>\r\n              <img\r\n                src={`${v.src.replace(/\\/thumb\\//, \"/original/\")}`}\r\n                alt={v.src}\r\n              />\r\n            </ImgWrapper>\r\n          ))}\r\n        </Slick>\r\n        <Indicator>\r\n          <div>\r\n            {currentSlide + 1}/{images.length}\r\n          </div>\r\n        </Indicator>\r\n      </SlickWrapper>\r\n    </Overlay>\r\n  );\r\n};\r\n\r\nImagesZoom.propTypes = {\r\n  images: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ImagesZoom;\r\n","import React, { useCallback, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\n\r\nimport ImagesZoom from \"./ImagesZoom\";\r\n\r\nconst PostImages = ({ images }) => {\r\n  const [showImagesZoom, setShowImagesZoom] = useState(false);\r\n\r\n  const onZoom = useCallback(() => {\r\n    setShowImagesZoom(true);\r\n  }, []);\r\n  const onClose = useCallback(() => {\r\n    setShowImagesZoom(false);\r\n  }, []);\r\n  if (images.length === 1) {\r\n    return (\r\n      <>\r\n        <img\r\n          role=\"presentation\"\r\n          src={images[0].src}\r\n          alt={images[0].src}\r\n          onClick={onZoom}\r\n        />\r\n        {showImagesZoom && <ImagesZoom images={images} onClose={onClose} />}\r\n      </>\r\n    );\r\n  }\r\n  if (images.length === 2) {\r\n    return (\r\n      <>\r\n        <img\r\n          role=\"presentation\"\r\n          style={{ width: \"50%\", display: \"inline-block\" }}\r\n          src={images[0].src}\r\n          alt={images[0].src}\r\n          onClick={onZoom}\r\n        />\r\n        <img\r\n          role=\"presentation\"\r\n          style={{ width: \"50%\", display: \"inline-block\" }}\r\n          src={images[1].src}\r\n          alt={images[1].src}\r\n          onClick={onZoom}\r\n        />\r\n        {showImagesZoom && <ImagesZoom images={images} onClose={onClose} />}\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <div>\r\n        <img\r\n          role=\"presentation\"\r\n          width=\"50%\"\r\n          src={images[0].src}\r\n          alt={images[0].src}\r\n          onClick={onZoom}\r\n        />\r\n        <div\r\n          role=\"presentation\"\r\n          style={{\r\n            display: \"inline-block\",\r\n            width: \"50%\",\r\n            textAlign: \"center\",\r\n            verticalAlign: \"middle\",\r\n          }}\r\n          onClick={onZoom}\r\n        >\r\n          <PlusOutlined />\r\n          <br />\r\n          {images.length - 1}\r\n          개의 사진 더보기\r\n        </div>\r\n      </div>\r\n      {showImagesZoom && <ImagesZoom images={images} onClose={onClose} />}\r\n    </>\r\n  );\r\n};\r\n\r\nPostImages.propTypes = {\r\n  images: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n\r\nexport default PostImages;\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { Button, Form, Input } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport useInput from \"../hooks/useInput\";\r\n\r\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\r\n\r\nconst CommentForm = ({ post }) => {\r\n  const id = useSelector((state) => state.user.me?.id);\r\n  const { addCommentDone, addCommentLoading } = useSelector(\r\n    (state) => state.post\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const [commentText, onChangeCommentText, setCommentText] = useInput(\"\");\r\n\r\n  useEffect(() => {\r\n    if (addCommentDone) {\r\n      setCommentText(\"\");\r\n    }\r\n  }, [addCommentDone]);\r\n\r\n  const onSubmitComment = useCallback(() => {\r\n    dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: { content: commentText, postId: post.id, userId: id },\r\n    });\r\n  }, [commentText, id]);\r\n\r\n  return (\r\n    <Form onFinish={onSubmitComment}>\r\n      <Form.Item style={{ position: \"relative\", margin: 0 }}>\r\n        <Input.TextArea\r\n          value={commentText}\r\n          onChange={onChangeCommentText}\r\n          rows={4}\r\n        />\r\n        <Button\r\n          style={{ position: \"absolute\", right: 0, bottom: -40, zIndex: 1 }}\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          loading={addCommentLoading}\r\n        >\r\n          삐약\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nCommentForm.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CommentForm;\r\n","import React from \"react\";\r\nimport Link from \"next/link\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PostCardContent = ({ postData }) => {\r\n  return (\r\n    <div>\r\n      {postData.split(/(#[^\\s#]+)/g).map((v, i) => {\r\n        if (v.match(/(#[^\\s#]+)/)) {\r\n          return (\r\n            <Link key={i} href={`/hashtag/${v.slice(1)}`}>\r\n              <a>{v}</a>\r\n            </Link>\r\n          );\r\n        }\r\n        return v;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCardContent.propTypes = {\r\n  postData: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default PostCardContent;\r\n","import { Button } from \"antd\";\r\nimport React, { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { FOLLOW_REQUEST, UNFOLLOW_REQUEST } from \"../reducers/user\";\r\n\r\nconst FollowButton = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const { me, followLoading, unfollowLoading } = useSelector((state) => state.user);\r\n\r\n  const isFollowing = me?.Followings.find((v) => v.id === post.User.id);\r\n  const onClickButton = useCallback(() => {\r\n    if (isFollowing) {\r\n      dispatch({ type: UNFOLLOW_REQUEST, data: post.User.id });\r\n    } else {\r\n      dispatch({ type: FOLLOW_REQUEST, data: post.User.id });\r\n    }\r\n  }, [isFollowing]);\r\n\r\n  // return문은 hooks보다 아래에 적도록 한다. 안 그러면 Rendered fewer hooks than expected 에러 발생\r\n  if (post.User.id === me.id) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Button onClick={onClickButton} loading={followLoading || unfollowLoading}>\r\n      {isFollowing ? \"언팔로우\" : \"팔로우\"}\r\n    </Button>\r\n  );\r\n};\r\n\r\nFollowButton.propTypes = {\r\n  post: PropTypes.object,\r\n};\r\n\r\nexport default FollowButton;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Link from \"next/link\";\r\nimport { Avatar, Button, Card, Comment, List, Popover } from \"antd\";\r\nimport {\r\n  EllipsisOutlined,\r\n  HeartOutlined,\r\n  HeartTwoTone,\r\n  MessageOutlined,\r\n  RetweetOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\nimport PostImages from \"./PostImages\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport PostCardContent from \"./PostCardContent\";\r\nimport FollowButton from \"./FollowButton\";\r\nimport {\r\n  RETWEET_REQUEST,\r\n  REMOVE_POST_REQUEST,\r\n  LIKE_POST_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n} from \"../reducers/post\";\r\n\r\nmoment.locale(\"ko\");\r\n\r\nconst PostCard = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { removePostLoading } = useSelector((state) => state.post);\r\n  const id = me?.id;\r\n  const liked = post.Likers.find((v) => v.id === id);\r\n\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n\r\n  const onRetweet = useCallback(() => {\r\n    if (!id) {\r\n      return alert(\"로그인이 필요합니다.\");\r\n    }\r\n    dispatch({ type: RETWEET_REQUEST, data: post.id });\r\n  }, [id]);\r\n\r\n  const onToggleLike = useCallback(() => {\r\n    if (!id) {\r\n      return alert(\"로그인이 필요합니다.\");\r\n    }\r\n\r\n    if (liked) {\r\n      dispatch({ type: UNLIKE_POST_REQUEST, data: post.id });\r\n    } else {\r\n      dispatch({ type: LIKE_POST_REQUEST, data: post.id });\r\n    }\r\n  }, [liked, id]);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened((prev) => !prev);\r\n  }, []);\r\n\r\n  const onRemovePost = useCallback(() => {\r\n    dispatch({ type: REMOVE_POST_REQUEST, data: post.id });\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ marginBottom: 20 }}>\r\n      <Card\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n          liked ? (\r\n            <HeartTwoTone\r\n              twoToneColor=\"#eb2f96\"\r\n              key=\"heart\"\r\n              onClick={onToggleLike}\r\n            />\r\n          ) : (\r\n            <HeartOutlined key=\"heart\" onClick={onToggleLike} />\r\n          ),\r\n          <MessageOutlined key=\"message\" onClick={onToggleComment} />,\r\n          <Popover\r\n            key=\"more\"\r\n            content={\r\n              <Button.Group>\r\n                {id && id === post.User.id ? (\r\n                  <>\r\n                    <Button>수정</Button>\r\n                    <Button\r\n                      type=\"danger\"\r\n                      loading={removePostLoading}\r\n                      onClick={onRemovePost}\r\n                    >\r\n                      삭제\r\n                    </Button>\r\n                  </>\r\n                ) : (\r\n                  <Button>신고</Button>\r\n                )}\r\n              </Button.Group>\r\n            }\r\n          >\r\n            <EllipsisOutlined />\r\n          </Popover>,\r\n        ]}\r\n        extra={id && <FollowButton post={post} />}\r\n        title={\r\n          post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null\r\n        }\r\n      >\r\n        {post.Retweet && post.RetweetId ? (\r\n          <Card\r\n            cover={\r\n              post.Retweet.Images[0] && (\r\n                <PostImages images={post.Retweet.Images} />\r\n              )\r\n            }\r\n          >\r\n            <div style={{ float: \"right\" }}>\r\n              {moment(post.createdAt).format(\"YYYY.MM.DD\")}\r\n            </div>\r\n            <Card.Meta\r\n              avatar={\r\n                <Link href={`/user/${post.Retweet.User.id}`}>\r\n                  <a>\r\n                    <Avatar>{post.Retweet.User.nickname[0]}</Avatar>\r\n                  </a>\r\n                </Link>\r\n              }\r\n              title={post.Retweet.User.nickname}\r\n              description={<PostCardContent postData={post.Retweet.content} />}\r\n            />\r\n          </Card>\r\n        ) : (\r\n          <>\r\n            <div style={{ float: \"right\" }}>\r\n              {moment(post.createdAt).format(\"YYYY.MM.DD\")}\r\n            </div>\r\n            <Card.Meta\r\n              avatar={\r\n                <Link href={`/user/${post.User.id}`}>\r\n                  <a>\r\n                    <Avatar>{post.User.nickname[0]}</Avatar>\r\n                  </a>\r\n                </Link>\r\n              }\r\n              title={post.User.nickname}\r\n              description={<PostCardContent postData={post.content} />}\r\n            />\r\n          </>\r\n        )}\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <div>\r\n          <CommentForm post={post} />\r\n          <List\r\n            header={`${post.Comments.length}개의 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments}\r\n            renderItem={(item) => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={\r\n                    <Link href={`/user/${item.User.id}`}>\r\n                      <a>\r\n                        <Avatar>{item.User.nickname[0]}</Avatar>\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// post 내의 속성들도 타입 체크를 하기 위해서는 -> shape\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    createdAt: PropTypes.string,\r\n    Likers: PropTypes.arrayOf(PropTypes.object),\r\n    RetweetId: PropTypes.number,\r\n    Retweet: PropTypes.objectOf(PropTypes.any),\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostCard;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport default (initialValue = null) => {\r\n  const [value, setValue] = useState(initialValue);\r\n  const handler = useCallback((e) => {\r\n    setValue(e.target.value);\r\n  }, []);\r\n  return [value, handler, setValue];\r\n};\r\n"],"names":["dispatch","useDispatch","useSelector","state","user","me","logOutLoading","onLogout","useCallback","logoutRequestAction","type","actions","href","id","Posts","length","Followings","Followers","avatar","nickname","title","onClick","loading","FormWrapper","styled","Form","ButtonWrapper","useInput","email","onChangeEmail","password","onChangePassword","logInLoading","logInError","useEffect","alert","onSubmitForm","console","log","loginRequestAction","onFinish","htmlFor","name","value","onChange","required","htmlType","SearchInput","Input","children","searchInput","onChangeSearchInput","onSearch","Router","mode","enterButton","xs","md","target","rel","Overlay","Header","CloseBtn","CloseOutlined","SlickWrapper","ImgWrapper","Indicator","Global","createGlobalStyle","images","onClose","useState","currentSlide","setCurrentSlide","initialSlide","afterChange","slide","infinite","arrows","slidesToShow","slidesToScroll","map","v","src","replace","alt","showImagesZoom","setShowImagesZoom","onZoom","role","style","width","display","textAlign","verticalAlign","PlusOutlined","post","addCommentDone","addCommentLoading","commentText","onChangeCommentText","setCommentText","onSubmitComment","ADD_COMMENT_REQUEST","data","content","postId","userId","position","margin","rows","right","bottom","zIndex","postData","split","i","match","slice","followLoading","unfollowLoading","isFollowing","find","User","onClickButton","UNFOLLOW_REQUEST","FOLLOW_REQUEST","moment","removePostLoading","liked","Likers","commentFormOpened","setCommentFormOpened","onRetweet","RETWEET_REQUEST","onToggleLike","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","onToggleComment","prev","onRemovePost","REMOVE_POST_REQUEST","marginBottom","cover","Images","RetweetOutlined","HeartTwoTone","twoToneColor","HeartOutlined","MessageOutlined","EllipsisOutlined","extra","RetweetId","Retweet","float","createdAt","format","description","header","Comments","itemLayout","dataSource","renderItem","item","author","initialValue","setValue","handler","e"],"sourceRoot":""}